// diagnostico_definitivo.js
// Diagn√≥stico definitivo: ESP vs Anem√≥metro - ¬øD√≥nde est√° el problema?

const mqtt = require('mqtt');

// Configuraci√≥n MQTT
const BROKER = "mqtt://192.168.1.31";
const DATA_TOPIC = "anemometro/datos";
const CONTROL_TOPIC = "anemometro/control";

// Variables de diagn√≥stico
let diagnostico = {
  esp_funcionando: false,
  ble_funcionando: false,
  anemometro_detectado: false,
  rssi_detectado: false,
  errores_ble: 0,
  mensajes_recibidos: 0,
  ultima_conexion: null,
  rssi_values: [],
  uptime_esp: 0,
  reset_count: 0
};

// Conectar al broker MQTT
const client = mqtt.connect(BROKER);

console.log("üî¨ DIAGN√ìSTICO DEFINITIVO: ESP vs ANEM√ìMETRO");
console.log("=".repeat(70));
console.log(`üåê Broker MQTT: ${BROKER}`);
console.log(`üìÖ Inicio: ${new Date().toLocaleString('es-ES')}`);
console.log("=".repeat(70));

client.on('connect', () => {
  console.log("‚úÖ Conectado al broker MQTT");
  iniciarDiagnosticoDefinitivo();
});

client.on('message', (topic, payload) => {
  if (topic === DATA_TOPIC) {
    procesarMensajeDefinitivo(payload);
  }
});

// Funci√≥n para enviar comando de control
async function enviarComandoControl(comando, parametros = {}) {
  return new Promise((resolve, reject) => {
    const payload = JSON.stringify({
      comando: comando,
      parametros: parametros,
      timestamp: Date.now(),
      source: "diagnostico_definitivo"
    });

    console.log(`üîß Enviando comando: ${comando}`);
    
    client.publish(CONTROL_TOPIC, payload, { qos: 1 }, (err) => {
      if (err) {
        console.error(`‚ùå Error enviando comando: ${err.message}`);
        reject(err);
      } else {
        console.log(`‚úÖ Comando enviado: ${comando}`);
        resolve(true);
      }
    });
  });
}

// Funci√≥n para procesar mensajes del diagn√≥stico definitivo
function procesarMensajeDefinitivo(payload) {
  try {
    const data = JSON.parse(payload.toString());
    const sys = data.sys || {};
    
    diagnostico.mensajes_recibidos++;
    
    // Extraer informaci√≥n del sistema
    const bleOk = sys.ble_ok;
    const bleFails = sys.ble_fails;
    const rssi = sys.rssi_dBm;
    const uptime = sys.uptime_s;
    const resetCount = sys.reset_count;
    
    // Actualizar diagn√≥stico
    if (uptime !== undefined) diagnostico.uptime_esp = uptime;
    if (resetCount !== undefined) diagnostico.reset_count = resetCount;
    if (bleFails !== undefined) diagnostico.errores_ble += bleFails;
    
    // Verificar RSSI
    if (rssi !== undefined && rssi > -100) {
      diagnostico.rssi_detectado = true;
      diagnostico.rssi_values.push(rssi);
    }
    
    // Verificar conexi√≥n BLE
    if (bleOk === 1) {
      diagnostico.ble_funcionando = true;
      diagnostico.ultima_conexion = Date.now();
    }
    
    // Verificar que la ESP est√° funcionando
    if (uptime > 0) {
      diagnostico.esp_funcionando = true;
    }
    
    console.log(`üìä Msg #${diagnostico.mensajes_recibidos} - BLE: ${bleOk === 1 ? '‚úÖ' : '‚ùå'}, RSSI: ${rssi || 'N/A'}dBm, Uptime: ${Math.floor(uptime/60)}min`);
    
  } catch (error) {
    console.error("‚ùå Error procesando mensaje:", error.message);
  }
}

// Funci√≥n para iniciar el diagn√≥stico definitivo
async function iniciarDiagnosticoDefinitivo() {
  console.log("üî¨ INICIANDO DIAGN√ìSTICO DEFINITIVO...");
  console.log("");
  
  // Paso 1: Verificar estado inicial
  console.log("üìã PASO 1: Verificando estado inicial...");
  await enviarComandoControl('estado_detallado');
  await esperar(5000);
  
  // Paso 2: Escaneo BLE amplio
  console.log("\nüìã PASO 2: Escaneo BLE amplio...");
  console.log("üîç Buscando cualquier dispositivo Bluetooth...");
  await enviarComandoControl('escaneo_ble', { duracion: 15000 });
  await esperar(17000);
  
  // Paso 3: Intentar reconexi√≥n
  console.log("\nüìã PASO 3: Intentando reconexi√≥n...");
  await enviarComandoControl('reconectar_ble');
  await esperar(8000);
  
  // Paso 4: Verificar configuraci√≥n
  console.log("\nüìã PASO 4: Verificando configuraci√≥n...");
  await enviarComandoControl('config_ble');
  await esperar(5000);
  
  // Generar diagn√≥stico definitivo
  generarDiagnosticoDefinitivo();
}

// Funci√≥n para esperar
function esperar(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

// Funci√≥n para generar el diagn√≥stico definitivo
function generarDiagnosticoDefinitivo() {
  console.log("\n" + "=".repeat(70));
  console.log("üî¨ DIAGN√ìSTICO DEFINITIVO");
  console.log("=".repeat(70));
  
  // An√°lisis de la ESP
  console.log("\nüì± AN√ÅLISIS DE LA ESP:");
  console.log(`   ‚úÖ ESP funcionando: ${diagnostico.esp_funcionando ? 'S√ç' : 'NO'}`);
  console.log(`   ‚è±Ô∏è  Uptime: ${Math.floor(diagnostico.uptime_esp/60)} minutos`);
  console.log(`   üî¢ Reset count: ${diagnostico.reset_count}`);
  console.log(`   üì° Mensajes recibidos: ${diagnostico.mensajes_recibidos}`);
  
  // An√°lisis del Bluetooth
  console.log("\nüì± AN√ÅLISIS DEL BLUETOOTH:");
  console.log(`   üîó BLE funcionando: ${diagnostico.ble_funcionando ? 'S√ç' : 'NO'}`);
  console.log(`   üì∂ RSSI detectado: ${diagnostico.rssi_detectado ? 'S√ç' : 'NO'}`);
  console.log(`   ‚ùå Errores BLE: ${diagnostico.errores_ble}`);
  
  if (diagnostico.rssi_values.length > 0) {
    const rssiPromedio = diagnostico.rssi_values.reduce((a, b) => a + b, 0) / diagnostico.rssi_values.length;
    console.log(`   üìä RSSI promedio: ${rssiPromedio.toFixed(1)}dBm`);
  }
  
  if (diagnostico.ultima_conexion) {
    const tiempoDesdeConexion = Math.floor((Date.now() - diagnostico.ultima_conexion) / 60000);
    console.log(`   ‚è∞ √öltima conexi√≥n: hace ${tiempoDesdeConexion} minutos`);
  }
  
  // DIAGN√ìSTICO DEFINITIVO
  console.log("\nüî¨ DIAGN√ìSTICO DEFINITIVO:");
  console.log("-".repeat(50));
  
  if (!diagnostico.esp_funcionando) {
    console.log("‚ùå PROBLEMA CR√çTICO: La ESP no est√° funcionando");
    console.log("   - La ESP no responde o est√° apagada");
    console.log("   - Verificar alimentaci√≥n y conexiones");
  } else if (!diagnostico.rssi_detectado) {
    console.log("‚ùå PROBLEMA EN EL BLUETOOTH DE LA ESP");
    console.log("   - La ESP no detecta NING√öN dispositivo Bluetooth");
    console.log("   - El hardware BLE de la ESP est√° da√±ado o mal configurado");
    console.log("   - Posibles causas:");
    console.log("     ‚Ä¢ Antena BLE desconectada o da√±ada");
    console.log("     ‚Ä¢ Hardware BLE da√±ado");
    console.log("     ‚Ä¢ Firmware BLE corrupto");
    console.log("     ‚Ä¢ Problema de alimentaci√≥n");
  } else if (diagnostico.rssi_detectado && !diagnostico.ble_funcionando) {
    console.log("‚úÖ BLUETOOTH DE LA ESP FUNCIONA");
    console.log("‚ùå PROBLEMA EN EL ANEM√ìMETRO");
    console.log("   - La ESP puede detectar dispositivos Bluetooth");
    console.log("   - El anem√≥metro espec√≠ficamente no responde");
    console.log("   - Posibles causas:");
    console.log("     ‚Ä¢ Anem√≥metro apagado");
    console.log("     ‚Ä¢ Anem√≥metro sin bater√≠a");
    console.log("     ‚Ä¢ Anem√≥metro fuera de rango");
    console.log("     ‚Ä¢ Fallo en el hardware del anem√≥metro");
  } else {
    console.log("‚úÖ TODO FUNCIONA CORRECTAMENTE");
    console.log("   - La ESP est√° funcionando");
    console.log("   - El Bluetooth est√° conectado");
    console.log("   - El anem√≥metro est√° respondiendo");
  }
  
  // RECOMENDACIONES ESPEC√çFICAS
  console.log("\nüí° RECOMENDACIONES ESPEC√çFICAS:");
  console.log("-".repeat(50));
  
  if (!diagnostico.esp_funcionando) {
    console.log("üîß VERIFICAR LA ESP:");
    console.log("1. Comprobar alimentaci√≥n de la ESP");
    console.log("2. Verificar conexiones de cables");
    console.log("3. Reiniciar completamente la ESP");
    console.log("4. Verificar que el firmware est√© cargado");
  } else if (!diagnostico.rssi_detectado) {
    console.log("üîß VERIFICAR BLUETOOTH DE LA ESP:");
    console.log("1. Comprobar conexi√≥n de la antena BLE");
    console.log("2. Verificar alimentaci√≥n estable (3.3V)");
    console.log("3. Reflashear firmware limpio");
    console.log("4. Verificar que no haya interferencias");
    console.log("5. Probar con otra ESP para comparar");
  } else if (diagnostico.rssi_detectado && !diagnostico.ble_funcionando) {
    console.log("üîß VERIFICAR EL ANEM√ìMETRO:");
    console.log("1. Comprobar si el anem√≥metro est√° encendido");
    console.log("2. Verificar nivel de bater√≠a del anem√≥metro");
    console.log("3. Acercar el anem√≥metro a la ESP (< 10m)");
    console.log("4. Reiniciar el anem√≥metro");
    console.log("5. Usar app de escaneo BLE en el m√≥vil");
    console.log("6. Verificar que el anem√≥metro no est√© da√±ado");
  }
  
  // PLAN DE ACCI√ìN
  console.log("\nüìã PLAN DE ACCI√ìN:");
  console.log("-".repeat(50));
  
  if (!diagnostico.rssi_detectado) {
    console.log("1. üîß Revisar f√≠sicamente la ESP:");
    console.log("   - Verificar antena BLE");
    console.log("   - Comprobar alimentaci√≥n");
    console.log("   - Reflashear firmware");
    console.log("");
    console.log("2. üîÑ Probar con otra ESP:");
    console.log("   - Si otra ESP detecta dispositivos ‚Üí problema en esta ESP");
    console.log("   - Si ninguna ESP detecta ‚Üí problema ambiental");
  } else {
    console.log("1. üîç Revisar f√≠sicamente el anem√≥metro:");
    console.log("   - Verificar encendido y bater√≠a");
    console.log("   - Acercar a la ESP");
    console.log("   - Reiniciar el anem√≥metro");
    console.log("");
    console.log("2. üì± Usar app de escaneo BLE:");
    console.log("   - Buscar dispositivos con nombre del anem√≥metro");
    console.log("   - Si no aparece ‚Üí anem√≥metro apagado/da√±ado");
    console.log("   - Si aparece ‚Üí problema de configuraci√≥n");
  }
  
  console.log("\n3. üîÑ Continuar monitoreando:");
  console.log("   - Ejecutar: node monitor_ble_mqtt.js");
  console.log("   - Observar cambios en el estado");
  console.log("   - Documentar cualquier mejora");
  
  console.log("\n" + "=".repeat(70));
  console.log("üî¨ DIAGN√ìSTICO DEFINITIVO COMPLETADO");
  console.log("=".repeat(70));
  
  // Cerrar conexi√≥n
  client.end();
  process.exit(0);
}

// Manejo de errores
client.on('error', (error) => {
  console.error("‚ùå Error de conexi√≥n MQTT:", error.message);
});

client.on('close', () => {
  console.log("üîå Conexi√≥n MQTT cerrada");
});

// Manejo de se√±ales
process.on('SIGINT', () => {
  console.log("\nüõë Deteniendo diagn√≥stico...");
  client.end();
  process.exit(0);
}); 