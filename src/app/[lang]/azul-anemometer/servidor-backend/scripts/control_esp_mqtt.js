// control_esp_mqtt.js
// Script para controlar la ESP directamente via MQTT

const mqtt = require('mqtt');

// Configuraci√≥n MQTT
const BROKER = "mqtt://192.168.1.31";
const CONTROL_TOPIC = "anemometro/control";
const client = mqtt.connect(BROKER);

// Funci√≥n para enviar comando MQTT
async function enviarComandoMQTT(comando) {
  return new Promise((resolve, reject) => {
    const payload = JSON.stringify({
      comando: comando,
      timestamp: Date.now(),
      source: "control_script"
    });

    console.log(`üîß Enviando comando MQTT: ${comando}`);
    console.log(`üì° Topic: ${CONTROL_TOPIC}`);
    console.log(`üì¶ Payload: ${payload}`);
    
    client.publish(CONTROL_TOPIC, payload, { qos: 1 }, (err) => {
      if (err) {
        console.error(`‚ùå Error enviando comando ${comando}:`, err.message);
        reject(err);
      } else {
        console.log(`‚úÖ Comando ${comando} enviado correctamente via MQTT`);
        resolve(true);
      }
    });
  });
}

// Funci√≥n para reiniciar ESP
async function reiniciarESP() {
  try {
    console.log("üîÑ Reiniciando ESP via MQTT...");
    await enviarComandoMQTT("reiniciar");
    console.log("‚è≥ La ESP se reiniciar√° en unos segundos...");
    console.log("üí° Despu√©s del reinicio, ejecuta el diagn√≥stico para verificar el estado");
  } catch (error) {
    console.error("‚ùå Error reiniciando ESP:", error.message);
  }
}

// Funci√≥n para reconectar Bluetooth
async function reconectarBluetooth() {
  try {
    console.log("üì± Reconectando Bluetooth via MQTT...");
    await enviarComandoMQTT("reconectar_ble");
    console.log("‚è≥ Intentando reconectar con el sensor...");
  } catch (error) {
    console.error("‚ùå Error reconectando Bluetooth:", error.message);
  }
}

// Funci√≥n para escanear Bluetooth
async function escanearBluetooth() {
  try {
    console.log("üîç Escaneando dispositivos Bluetooth via MQTT...");
    await enviarComandoMQTT("escaneo_ble");
    console.log("‚è≥ Escaneando dispositivos disponibles...");
  } catch (error) {
    console.error("‚ùå Error escaneando Bluetooth:", error.message);
  }
}

// Funci√≥n para obtener estado detallado
async function obtenerEstadoDetallado() {
  try {
    console.log("üìä Solicitando estado detallado via MQTT...");
    await enviarComandoMQTT("estado_detallado");
    console.log("‚è≥ Obteniendo informaci√≥n detallada...");
  } catch (error) {
    console.error("‚ùå Error obteniendo estado:", error.message);
  }
}

// Funci√≥n para configurar par√°metro
async function configurarParametro(parametro, valor) {
  try {
    console.log(`‚öôÔ∏è Configurando ${parametro} = ${valor} via MQTT...`);
    await enviarComandoMQTT(`configurar_${parametro}_${valor}`);
    console.log(`üîß Par√°metro configurado: ${parametro} = ${valor}`);
  } catch (error) {
    console.error("‚ùå Error configurando par√°metro:", error.message);
  }
}

// Funci√≥n principal
async function main() {
  const args = process.argv.slice(2);
  const comando = args[0];
  
  console.log("üîß CONTROL MQTT DE LA ESP DEL ANEM√ìMETRO");
  console.log("=".repeat(60));
  console.log(`üåê Broker MQTT: ${BROKER}`);
  console.log(`üì° Topic: ${CONTROL_TOPIC}`);
  console.log(`üìÖ Fecha: ${new Date().toLocaleString('es-ES')}`);
  console.log("=".repeat(60));
  
  // Conectar al broker MQTT
  client.on('connect', async () => {
    console.log("‚úÖ Conectado al broker MQTT");
    
    try {
      switch (comando) {
        case 'reiniciar':
          await reiniciarESP();
          break;
          
        case 'reconectar':
          await reconectarBluetooth();
          break;
          
        case 'escaneo':
          await escanearBluetooth();
          break;
          
        case 'estado':
          await obtenerEstadoDetallado();
          break;
          
        case 'configurar':
          const parametro = args[1];
          const valor = args[2];
          if (!parametro || valor === undefined) {
            console.error("‚ùå Uso: node control_esp_mqtt.js configurar <parametro> <valor>");
            process.exit(1);
          }
          await configurarParametro(parametro, valor);
          break;
          
        case 'ayuda':
        case 'help':
        case '--help':
        case '-h':
          mostrarAyuda();
          break;
          
        default:
          console.log("‚ùå Comando no reconocido. Usa 'ayuda' para ver opciones disponibles.");
          mostrarAyuda();
          break;
      }
      
      // Desconectar despu√©s de enviar el comando
      setTimeout(() => {
        client.end();
        console.log("üîå Desconectado del broker MQTT");
      }, 2000);
      
    } catch (error) {
      console.error("‚ùå Error ejecutando comando:", error.message);
      client.end();
    }
  });
  
  client.on('error', (error) => {
    console.error("‚ùå Error de conexi√≥n MQTT:", error.message);
    process.exit(1);
  });
  
  client.on('close', () => {
    console.log("üîå Conexi√≥n MQTT cerrada");
  });
}

function mostrarAyuda() {
  console.log("üîß CONTROL MQTT DE LA ESP");
  console.log("=".repeat(50));
  console.log("Uso:");
  console.log("  node control_esp_mqtt.js <comando> [opciones]");
  console.log("");
  console.log("Comandos:");
  console.log("  reiniciar           - Reiniciar la ESP completamente");
  console.log("  reconectar          - Forzar reconexi√≥n Bluetooth");
  console.log("  escaneo             - Escanear dispositivos Bluetooth");
  console.log("  estado              - Obtener estado detallado");
  console.log("  configurar p v      - Configurar par√°metro p = valor v");
  console.log("  ayuda               - Mostrar esta ayuda");
  console.log("");
  console.log("Ejemplos:");
  console.log("  node control_esp_mqtt.js reiniciar");
  console.log("  node control_esp_mqtt.js reconectar");
  console.log("  node control_esp_mqtt.js configurar intervalo_s 10");
  console.log("=".repeat(50));
}

// Ejecutar si se llama directamente
if (require.main === module) {
  main().catch(error => {
    console.error("‚ùå Error fatal:", error.message);
    process.exit(1);
  });
}

module.exports = {
  reiniciarESP,
  reconectarBluetooth,
  escanearBluetooth,
  obtenerEstadoDetallado,
  configurarParametro
}; 